rm(list = ls())
gc()
closeAllConnections()
# --- Cargar librerías necesarias
library("pacman")
require("pacman")
p_load( tidyverse, data.table, lubridate, readxl, ggthemes, plotly, janitor,ggplot2)
# --- Definir rutas
user <- Sys.getenv("USERNAME")
if (user == "judel") {
path <- file.path("C:/Users", "judel", "OneDrive", "Documentos",
"ANDES", "Semestre 3", "Visualizacion de datos", "Actividad 1")
} else if (user == "mvill") {
path <- file.path("C:/Users", "mvill", "OneDrive", "Transitorio", "OneDrive",
"Documentos", "GitHub", "Visualizaci-n-UniAndes")
} else {
path <- choose.dir(caption = "Selecciona la carpeta con los archivos")
}
setwd(path)
# --- Cargar datos
file_area      <- file.path(path, "data/mun_area.csv")
file_poblacion <- file.path(path, "data/pob_censal.xlsx")
mun_area   <- read_csv(file_area) %>% clean_names()
pob_censal <- read_excel(file_poblacion, sheet = 1) %>% clean_names()
ggplot(pob_censal, aes(x = poblacion)) +
geom_histogram(binwidth = 5000, fill = "steelblue", color = "white") +
facet_wrap(~ dp, scales = "free_y") +
theme_minimal()
ggplot(pob_censal, aes(x = poblacion, fill = dp)) +
geom_histogram(alpha = 0.6, position = "identity") +
facet_wrap(~ dp, scales = "free_y") +
theme_minimal()
pob_censal2 %>%
filter(poblacion <= quantile(poblacion, 0.95, na.rm = TRUE)) %>%
ggplot(aes(x = poblacion, fill = dp)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 10) +
facet_wrap(~ dp, scales = "free_y") +
theme_minimal()
ggplot(pob_censal2, aes(x = poblacion, fill = dp)) +
geom_histogram(alpha = 0.6, position = "identity") +
facet_wrap(~ dp, scales = "free_y") +
theme_minimal()
pob_censal2 <- pob_censal %>%
filter(poblacion <= quantile(poblacion, 0.95, na.rm = TRUE)) %>%
ggplot(aes(x = poblacion, fill = dp)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 10) +
facet_wrap(~ dp, scales = "free_y") +
theme_minimal()
ggplot(pob_censal2, aes(x = poblacion, fill = dp)) +
geom_histogram(alpha = 0.6, position = "identity") +
facet_wrap(~ dp, scales = "free_y") +
theme_minimal()
pob_censal %>%
filter(poblacion <= quantile(poblacion, 0.95, na.rm = TRUE)) %>%
ggplot(aes(x = poblacion, fill = dp)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 10) +
facet_wrap(~ dp, scales = "free_y") +
theme_minimal()
pob_censal %>%
filter(poblacion <= quantile(poblacion, 0.95, na.rm = TRUE)) %>%
ggplot(aes(x = poblacion, fill = dpnom)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 10) +
facet_wrap(~ dp, scales = "free_y") +
theme_minimal()
pob_censal %>%
filter(poblacion <= quantile(poblacion, 0.95, na.rm = TRUE)) %>%
ggplot(aes(x = poblacion, fill = dp)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 10) +
facet_wrap(~ dpnom, scales = "free_y") +
theme_minimal()
pob_censal %>%
filter(poblacion <= quantile(poblacion, 0.95, na.rm = TRUE)) %>%
ggplot(aes(x = poblacion, fill = ano)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 10) +
facet_wrap(~ dpnom, scales = "free_y") +
theme_minimal()
pob_censal %>%
filter(poblacion <= quantile(poblacion, 0.95, na.rm = TRUE)) %>%
ggplot(aes(x = poblacion)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 10) +
facet_wrap(~ dpnom, scales = "free_y") +
theme_minimal()
View(pob_censal)
View(mun_area)
View(pob_censal)
# --- pob_censal ---
pob_censal <- pob_censal %>%
mutate(
dpmp = sprintf("%05d", as.integer(dpmp)),   # código municipal 5 dígitos
dp   = sprintf("%02d", as.integer(dp)),     # código depto 2 dígitos
ano = as.integer(ano),
poblacion = as.integer(poblacion),
llave = paste0(dpmp, "_", ano)              # llave única
)
if ("dpnom" %in% names(pob_censal)) {
pob_censal <- pob_censal %>%
mutate(dpnom = tolower(iconv(dpnom, from = "UTF-8", to = "ASCII//TRANSLIT")))
}
# --- mun_area ---
mun_area <- mun_area %>%
rename(ano = ano_creacion) %>%   # renombrar columna
mutate(
dpmp = sprintf("%05d", as.integer(dpmp)),
dp   = sprintf("%02d", as.integer(dp)),
ano  = as.integer(ano),             # ahora ya está como ano
llave = paste0(dpmp, "_", ano)      # misma llave que pob_censal
)
View(mun_area)
View(pob_censal)
# --- Verificar valores vacíos
na_pob <- sapply(pob_censal, function(x) sum(is.na(x)))
na_area <- sapply(mun_area, function(x) sum(is.na(x)))
cat("\n--- Valores NA en pob_censal ---\n")
print(na_pob)
cat("\n--- Valores NA en mun_area ---\n")
print(na_area)
# Filtrar filas con algún NA
na_rows_pob <- pob_censal %>% filter(if_any(everything(), is.na))
na_rows_area <- mun_area %>% filter(if_any(everything(), is.na))
cat("\n--- Filas con NA en pob_censal ---\n")
print(na_rows_pob)
cat("\n--- Filas con NA en mun_area ---\n")
print(na_rows_area)
# ==========================================================
# Verificación de duplicados en ambas bases
# ==========================================================
# --- Población censal ---
duplicados_pob <- pob_censal %>%
count(llave) %>%
filter(n > 1)
cat("\n>>> Verificación de duplicados en pob_censal <<<\n")
if (nrow(duplicados_pob) > 0) {
print(duplicados_pob)
} else {
cat("No se encontraron duplicados en pob_censal.\n")
}
# --- Municipios / áreas ---
duplicados_area <- mun_area %>%
count(llave) %>%
filter(n > 1)
cat("\n>>> Verificación de duplicados en mun_area <<<\n")
if (nrow(duplicados_area) > 0) {
print(duplicados_area)
} else {
cat("No se encontraron duplicados en mun_area.\n")
}
# --- Verificar valores vacíos
sapply(pob_censal, function(x) sum(is.na(x)))
sapply(mun_area, function(x) sum(is.na(x)))
# Filtrar filas con algún NA
na_rows_pob <- pob_censal %>% filter(if_any(everything(), is.na))
print(na_rows_pob)
View(mun_area)
View(pob_censal)
# --- Verificar valores vacíos
cat("\n--- Filas con NA en mun_area ---\n")
sapply(pob_censal, function(x) sum(is.na(x)))
cat("\n--- Filas con NA en pob_censal ---\n")
sapply(mun_area, function(x) sum(is.na(x)))
# --- Verificar duplicados
# --- Población censal ---
duplicados_pob <- pob_censal %>% count(llave) %>% filter(n > 1)
cat("\n>>> Verificación de duplicados en pob_censal <<<\n")
if (nrow(duplicados_pob) > 0) { print(duplicados_pob)} else { cat("No se encontraron duplicados en pob_censal.\n")}
# --- Municipios / áreas ---
duplicados_area <- mun_area %>% count(llave) %>% filter(n > 1)
cat("\n>>> Verificación de duplicados en mun_area <<<\n")
if (nrow(duplicados_area) > 0) { print(duplicados_area)
} else { cat("No se encontraron duplicados en mun_area.\n") }
rm(duplicados_pob, duplicados_area)
# ==========================================================
# Comparación de años
# ==========================================================
anos_pob   <- sort(unique(pob_censal$ano))
anos_area  <- sort(unique(mun_area$ano))
anos_comunes    <- intersect(anos_pob, anos_area)
anos_solo_pob   <- setdiff(anos_pob, anos_area)
anos_solo_area  <- setdiff(anos_area, anos_pob)
cat("\n>>> Comparación de AÑOS <<<\n")
cat("Años en pob_censal:", anos_pob, "\n")
cat("Años en mun_area:", anos_area, "\n")
cat("Años en común:", anos_comunes, "\n")
cat("Años SOLO en pob_censal:", anos_solo_pob, "\n")
cat("Años SOLO en mun_area:", anos_solo_area, "\n")
# ==========================================================
# Comparación de municipios (dpmp)
# ==========================================================
dpmp_pob  <- sort(unique(pob_censal$dpmp))
dpmp_area <- sort(unique(mun_area$dpmp))
dpmp_comunes   <- intersect(dpmp_pob, dpmp_area)
dpmp_solo_pob  <- setdiff(dpmp_pob, dpmp_area)
dpmp_solo_area <- setdiff(dpmp_area, dpmp_pob)
cat("\n>>> Comparación de MUNICIPIOS (dpmp) <<<\n")
cat("Municipios en pob_censal:", length(dpmp_pob), "\n")
cat("Municipios en mun_area:", length(dpmp_area), "\n")
cat("Municipios en común:", length(dpmp_comunes), "\n")
cat("Municipios SOLO en pob_censal:", length(dpmp_solo_pob), "\n")
cat("Municipios SOLO en mun_area:", length(dpmp_solo_area), "\n")
# Opcional: mostrar ejemplos de los que no coinciden
if (length(dpmp_solo_pob) > 0) {
cat("\nEjemplos de dpmp SOLO en pob_censal:\n")
print(head(dpmp_solo_pob))
}
if (length(dpmp_solo_area) > 0) {
cat("\nEjemplos de dpmp SOLO en mun_area:\n")
print(head(dpmp_solo_area))
}
# ==========================================================
# Comparación de años
# ==========================================================
anos_pob   <- sort(unique(pob_censal$ano))
anos_area  <- sort(unique(mun_area$ano))
anos_comunes    <- intersect(anos_pob, anos_area)
anos_solo_pob   <- setdiff(anos_pob, anos_area)
anos_solo_area  <- setdiff(anos_area, anos_pob)
cat("\n>>> Comparación de AÑOS <<<\n")
#cat("Años en pob_censal:", anos_pob, "\n")
#cat("Años en mun_area:", anos_area, "\n")
cat("Años en común:", anos_comunes, "\n")
cat("Años SOLO en pob_censal:", anos_solo_pob, "\n")
cat("Años SOLO en mun_area:", anos_solo_area, "\n")
rm(anos_pob,anos_area,anos_comunes,anos_solo_pob,anos_solo_area)
# ==========================================================
# Comparación de municipios (dpmp)
# ==========================================================
dpmp_pob  <- sort(unique(pob_censal$dpmp))
dpmp_area <- sort(unique(mun_area$dpmp))
dpmp_comunes   <- intersect(dpmp_pob, dpmp_area)
dpmp_solo_pob  <- setdiff(dpmp_pob, dpmp_area)
dpmp_solo_area <- setdiff(dpmp_area, dpmp_pob)
cat("\n>>> Comparación de MUNICIPIOS (dpmp) <<<\n")
cat("Municipios en pob_censal:", length(dpmp_pob), "\n")
cat("Municipios en mun_area:", length(dpmp_area), "\n")
cat("Municipios en común:", length(dpmp_comunes), "\n")
cat("Municipios SOLO en pob_censal:", length(dpmp_solo_pob), "\n")
cat("Municipios SOLO en mun_area:", length(dpmp_solo_area), "\n")
# Opcional: mostrar ejemplos de los que no coinciden
if (length(dpmp_solo_pob) > 0) {
cat("\nEjemplos de dpmp SOLO en pob_censal:\n")
print(head(dpmp_solo_pob))
}
if (length(dpmp_solo_area) > 0) {
cat("\nEjemplos de dpmp SOLO en mun_area:\n")
print(head(dpmp_solo_area))
}
View(mun_area)
View(pob_censal)
View(mun_area)
# --- Outer join
outer_join <- full_join( mun_area, pob_censal, by = c("dpmp", "dp", "ano", "llave"))
View(outer_join)
left_join <- left_join( pob_censal, mun_area, by = c("dpmp", "dp", "ano", "llave"))
View(left_join)
# ==========================================================
# Comparación de años
# ==========================================================
anos_pob   <- sort(unique(pob_censal$ano))
anos_area  <- sort(unique(mun_area$ano))
anos_comunes    <- intersect(anos_pob, anos_area)
anos_solo_pob   <- setdiff(anos_pob, anos_area)
anos_solo_area  <- setdiff(anos_area, anos_pob)
cat("\n>>> Comparación de AÑOS <<<\n")
#cat("Años en pob_censal:", anos_pob, "\n")
#cat("Años en mun_area:", anos_area, "\n")
cat("Años en común:", anos_comunes, "\n")
cat("Años SOLO en pob_censal:", anos_solo_pob, "\n")
cat("Años SOLO en mun_area:", anos_solo_area, "\n")
rm(anos_pob,anos_area,anos_comunes,anos_solo_pob,anos_solo_area)
# ==========================================================
# Comparación de municipios (dpmp)
# ==========================================================
dpmp_pob  <- sort(unique(pob_censal$dpmp))
dpmp_area <- sort(unique(mun_area$dpmp))
dpmp_comunes   <- intersect(dpmp_pob, dpmp_area)
dpmp_solo_pob  <- setdiff(dpmp_pob, dpmp_area)
dpmp_solo_area <- setdiff(dpmp_area, dpmp_pob)
cat("\n>>> Comparación de MUNICIPIOS (dpmp) <<<\n")
#cat("Municipios en pob_censal:", length(dpmp_pob), "\n")
#cat("Municipios en mun_area:", length(dpmp_area), "\n")
cat("Municipios en común:", length(dpmp_comunes), "\n")
cat("Municipios SOLO en pob_censal:", length(dpmp_solo_pob), "\n")
cat("Municipios SOLO en mun_area:", length(dpmp_solo_area), "\n")
# Opcional: mostrar ejemplos de los que no coinciden
if (length(dpmp_solo_pob) > 0) {
cat("\nEjemplos de dpmp SOLO en pob_censal:\n")
print(head(dpmp_solo_pob))
}
if (length(dpmp_solo_area) > 0) {
cat("\nEjemplos de dpmp SOLO en mun_area:\n")
print(head(dpmp_solo_area))
}
rm(dpmp_pob,dpmp_area,dpmp_comunes,dpmp_solo_pob,dpmp_solo_area)
# ==========================================================
# Comparación llaves en común
# ==========================================================
llaves_pob   <- sort(unique(pob_censal$llave))
llaves_area  <- sort(unique(mun_area$llave))
llaves_comunes    <- intersect(llaves_pob, llaves_area)
llaves_solo_pob   <- setdiff(llaves_pob, llaves_area)
llave_solo_area  <- setdiff(llaves_area, llaves_pob)
cat("\n>>> Comparación de Llaves (dpmp+año) <<<\n")
cat("Llaves en común:", length(dpmp_comunes), "\n")
rm(llaves_pob,llaves_area,llaves_comunes,llaves_solo_pob,llave_solo_area)
llaves_pob   <- sort(unique(pob_censal$llave))
llaves_area  <- sort(unique(mun_area$llave))
llaves_comunes    <- intersect(llaves_pob, llaves_area)
llaves_solo_pob   <- setdiff(llaves_pob, llaves_area)
llave_solo_area  <- setdiff(llaves_area, llaves_pob)
cat("\n>>> Comparación de Llaves (dpmp+año) <<<\n")
cat("Llaves en común:", length(llaves_comunes), "\n")
rm(llaves_pob,llaves_area,llaves_comunes,llaves_solo_pob,llave_solo_area)
# --- Limpiar entorno
rm(list = ls())
gc()
closeAllConnections()
# --- Cargar librerías necesarias
library("pacman")
require("pacman")
p_load( tidyverse, data.table, lubridate, readxl, ggthemes, plotly, janitor,ggplot2)
# --- Definir rutas
user <- Sys.getenv("USERNAME")
if (user == "judel") {
path <- file.path("C:/Users", "judel", "OneDrive", "Documentos",
"ANDES", "Semestre 3", "Visualizacion de datos", "Actividad 1")
} else if (user == "mvill") {
path <- file.path("C:/Users", "mvill", "OneDrive", "Transitorio", "OneDrive",
"Documentos", "GitHub", "Visualizaci-n-UniAndes")
} else {
path <- choose.dir(caption = "Selecciona la carpeta con los archivos")
}
setwd(path)
# --- Cargar datos
file_area      <- file.path(path, "data/mun_area.csv")
file_poblacion <- file.path(path, "data/pob_censal.xlsx")
mun_area   <- read_csv(file_area) %>% clean_names()
pob_censal <- read_excel(file_poblacion, sheet = 1) %>% clean_names()
View(mun_area)
View(pob_censal)
pob_censal <- pob_censal %>%
mutate(
dpmp = sprintf("%05d", as.integer(dpmp)),   # código municipal 5 dígitos
dp   = sprintf("%02d", as.integer(dp)),     # código depto 2 dígitos
ano = as.integer(ano),
poblacion = as.integer(poblacion),
llave = paste0(dpmp, "_", ano)              # llave única
)
View(pob_censal)
mun_area <- mun_area %>%
rename(ano = ano_creacion) %>%   # renombrar columna
mutate(
dpmp = sprintf("%05d", as.integer(dpmp)),
dp   = sprintf("%02d", as.integer(dp)),
ano  = as.integer(ano),             # ahora ya está como ano
llave = paste0(dpmp, "_", ano)      # misma llave que pob_censal
)
View(mun_area)
# --- Limpiar entorno
rm(list = ls())
gc()
closeAllConnections()
# --- Cargar librerías necesarias
library("pacman")
require("pacman")
p_load( tidyverse, data.table, lubridate, readxl, ggthemes, plotly, janitor,ggplot2)
# --- Definir rutas
user <- Sys.getenv("USERNAME")
if (user == "judel") {
path <- file.path("C:/Users", "judel", "OneDrive", "Documentos",
"ANDES", "Semestre 3", "Visualizacion de datos", "Actividad 1")
} else if (user == "mvill") {
path <- file.path("C:/Users", "mvill", "OneDrive", "Transitorio", "OneDrive",
"Documentos", "GitHub", "Visualizaci-n-UniAndes")
} else {
path <- choose.dir(caption = "Selecciona la carpeta con los archivos")
}
setwd(path)
# --- Cargar datos
file_area      <- file.path(path, "data/mun_area.csv")
file_poblacion <- file.path(path, "data/pob_censal.xlsx")
mun_area   <- read_csv(file_area) %>% clean_names()
pob_censal <- read_excel(file_poblacion, sheet = 1) %>% clean_names()
summary(mun_area)
summary(pob_censal)
sapply(mun_area, class)
sapply(pob_censal, class)
# --- pob_censal ---
pob_censal <- pob_censal %>%
mutate(
dpmp = sprintf("%05d", as.integer(dpmp)),   # código municipal 5 dígitos
dp   = sprintf("%02d", as.integer(dp)),     # código depto 2 dígitos
ano = as.integer(ano),
poblacion = as.integer(poblacion),
llave = paste0(dpmp, "_", ano)              # llave única
)
if ("dpnom" %in% names(pob_censal)) {
pob_censal <- pob_censal %>%
mutate(dpnom = tolower(iconv(dpnom, from = "UTF-8", to = "ASCII//TRANSLIT")))
}
# --- mun_area ---
mun_area <- mun_area %>%
rename(ano = ano_creacion) %>%   # renombrar columna
mutate(
dpmp = sprintf("%05d", as.integer(dpmp)),
dp   = sprintf("%02d", as.integer(dp)),
ano  = as.integer(ano),             # ahora ya está como ano
llave = paste0(dpmp, "_", ano)      # misma llave que pob_censal
)
# --- Verificar valores vacíos
cat("\n--- Número de NA's por columna en mun_area ---\n")
sapply(pob_censal, function(x) sum(is.na(x)))
cat("\n--- Número de NA's por columna en pob_censal ---\n")
sapply(mun_area, function(x) sum(is.na(x)))
# --- Verificar duplicados
# --- Población censal ---
duplicados_pob <- pob_censal %>% count(llave) %>% filter(n > 1)
cat("\n>>> Verificación de duplicados en pob_censal <<<\n")
if (nrow(duplicados_pob) > 0) { print(duplicados_pob)} else { cat("No se encontraron duplicados en pob_censal.\n")}
# --- Municipios / áreas ---
duplicados_area <- mun_area %>% count(llave) %>% filter(n > 1)
cat("\n>>> Verificación de duplicados en mun_area <<<\n")
if (nrow(duplicados_area) > 0) { print(duplicados_area)
} else { cat("No se encontraron duplicados en mun_area.\n") }
rm(duplicados_pob, duplicados_area)
# ==========================================================
# Comparación de años
# ==========================================================
anos_pob   <- sort(unique(pob_censal$ano))
anos_area  <- sort(unique(mun_area$ano))
anos_comunes    <- intersect(anos_pob, anos_area)
anos_solo_pob   <- setdiff(anos_pob, anos_area)
anos_solo_area  <- setdiff(anos_area, anos_pob)
cat("\n>>> Comparación de AÑOS <<<\n")
#cat("Años en pob_censal:", anos_pob, "\n")
#cat("Años en mun_area:", anos_area, "\n")
cat("Años en común:", anos_comunes, "\n")
cat("Años SOLO en pob_censal:", anos_solo_pob, "\n")
cat("Años SOLO en mun_area:", anos_solo_area, "\n")
rm(anos_pob,anos_area,anos_comunes,anos_solo_pob,anos_solo_area)
# ==========================================================
# Comparación de municipios (dpmp)
# ==========================================================
dpmp_pob  <- sort(unique(pob_censal$dpmp))
dpmp_area <- sort(unique(mun_area$dpmp))
dpmp_comunes   <- intersect(dpmp_pob, dpmp_area)
dpmp_solo_pob  <- setdiff(dpmp_pob, dpmp_area)
dpmp_solo_area <- setdiff(dpmp_area, dpmp_pob)
cat("\n>>> Comparación de MUNICIPIOS (dpmp) <<<\n")
#cat("Municipios en pob_censal:", length(dpmp_pob), "\n")
#cat("Municipios en mun_area:", length(dpmp_area), "\n")
cat("Municipios en común:", length(dpmp_comunes), "\n")
cat("Municipios SOLO en pob_censal:", length(dpmp_solo_pob), "\n")
cat("Municipios SOLO en mun_area:", length(dpmp_solo_area), "\n")
# Opcional: mostrar ejemplos de los que no coinciden
if (length(dpmp_solo_pob) > 0) {
cat("\nEjemplos de dpmp SOLO en pob_censal:\n")
print(head(dpmp_solo_pob))
}
if (length(dpmp_solo_area) > 0) {
cat("\nEjemplos de dpmp SOLO en mun_area:\n")
print(head(dpmp_solo_area))
}
rm(dpmp_pob,dpmp_area,dpmp_comunes,dpmp_solo_pob,dpmp_solo_area)
# ==========================================================
# Comparación llaves en común
# ==========================================================
llaves_pob   <- sort(unique(pob_censal$llave))
llaves_area  <- sort(unique(mun_area$llave))
llaves_comunes    <- intersect(llaves_pob, llaves_area)
llaves_solo_pob   <- setdiff(llaves_pob, llaves_area)
llave_solo_area  <- setdiff(llaves_area, llaves_pob)
cat("\n>>> Comparación de Llaves (dpmp+año) <<<\n")
cat("Llaves en común:", length(llaves_comunes), "\n")
rm(llaves_pob,llaves_area,llaves_comunes,llaves_solo_pob,llave_solo_area)
# población
pob_neg <- pob_censal %>% filter(poblacion < 0 | is.na(poblacion))
if (nrow(pob_neg) > 0) {
cat("⚠️ Hay registros con población negativa o NA:\n")
print(pob_neg)
} else {
cat("No hay población negativa.\n")
}
# área (asumiendo columna se llama area en mun_area)
if ("area" %in% names(mun_area)) {
area_ceros <- mun_area %>% filter(area <= 0 | is.na(area))
if (nrow(area_ceros) > 0) {
cat("⚠️ Hay registros con área <= 0 o NA:\n")
print(area_ceros)
} else {
cat("No hay áreas menores o iguales a 0.\n")
}
# área (asumiendo columna se llama area en mun_area)
if ("area" %in% names(mun_area)) {
area_ceros <- mun_area %>% filter(area <= 0 | is.na(area))
if (nrow(area_ceros) > 0) {
cat("⚠️ Hay registros con área <= 0 o NA:\n")
print(area_ceros)
} else {
cat("No hay áreas menores o iguales a 0.\n")
}
# --- población
pob_neg <- pob_censal %>% filter(poblacion < 0 | is.na(poblacion))
if (nrow(pob_neg) > 0) { cat("⚠ Hay registros con población negativa o NA:\n") print(pob_neg)
} else { cat("No hay población negativa.\n") }
# --- área
if ("area" %in% names(mun_area)) {
area_ceros <- mun_area %>% filter(area <= 0 | is.na(area))
if (nrow(area_ceros) > 0) { cat("⚠ Hay registros con área <= 0 o NA:\n")
print(area_ceros) } else { cat("No hay áreas menores o iguales a 0.\n")}}
# --- tipo de variables (deben coincidir las que son comunes)
sapply(mun_area, class)
sapply(pob_censal, class)
# --- Estandarización
